/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import javax.crypto.Cipher
import javax.crypto.Mac
import javax.crypto.spec.GCMParameterSpec
import javax.crypto.spec.SecretKeySpec
import javax.crypto.spec.OAEPParameterSpec
import javax.crypto.spec.PSource
import java.util.Base64
import java.security.KeyPairGenerator
import java.security.spec.MGF1ParameterSpec

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    testAES()
    testRSA()
    testHMAC()
}

fun testAES() {
    val key = "12345678901234567890123456789012".toByteArray()
    val iv = "123456789012".toByteArray()
    val cipher = Cipher.getInstance("AES/GCM/NoPadding")
    cipher.init(Cipher.ENCRYPT_MODE, SecretKeySpec(key, "AES"), GCMParameterSpec(128, iv))
    val enc = cipher.doFinal("Hello".toByteArray())
    val encrypted = Base64.getEncoder().encodeToString(iv + enc)
    println("Encrypted: $encrypted")

    val last = Base64.getDecoder().decode(encrypted)
    val div = last.copyOfRange(0, 12)
    val droot = last.copyOfRange(12, last.size)
    val c2 = Cipher.getInstance("AES/GCM/NoPadding")
    c2.init(Cipher.DECRYPT_MODE, SecretKeySpec(key, "AES"), GCMParameterSpec(128, div))
    val dec = c2.doFinal(droot)
    println("Decrypted: ${dec.decodeToString()}")
}

fun testRSA() {
    val text = "Hello"
    val kpg = KeyPairGenerator.getInstance("RSA")
    kpg.initialize(2048)
    val kp = kpg.genKeyPair()
    val privateKey = kp.private
    val publicKey = kp.public

    val cipher = Cipher.getInstance("RSA/ECB/OAEPwithSHA-512andMGF1Padding")
    cipher.init(Cipher.ENCRYPT_MODE, publicKey, OAEPParameterSpec("SHA-512", "MGF1", MGF1ParameterSpec.SHA512, PSource.PSpecified.DEFAULT))
    val encrypted = cipher.doFinal(text.toByteArray())
    println("Encrypted: ${Base64.getEncoder().encodeToString(encrypted)}")

    val cipher2 = Cipher.getInstance("RSA/ECB/OAEPwithSHA-512andMGF1Padding")
    cipher2.init(Cipher.DECRYPT_MODE, privateKey, OAEPParameterSpec("SHA-512", "MGF1", MGF1ParameterSpec.SHA512, PSource.PSpecified.DEFAULT))
    println("Decrypted: ${cipher2.doFinal(encrypted).decodeToString()}")
}

fun testHMAC() {
    val mac = Mac.getInstance("HmacSHA512");
    mac.init(SecretKeySpec("12345678901234567890123456789012".toByteArray(), "HmacSHA512"))
    val res = mac.doFinal("Hello".toByteArray())
    println(Base64.getEncoder().encodeToString(res))
}